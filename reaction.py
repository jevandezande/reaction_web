class Reaction:
    def __init__(self, reactants, products):
        """
        A transformation from reactant to product molecules
        :param reactants: list of reactant molecules
        :param products: list of product molecules
        """
        assert isinstance(reactants, list)
        assert isinstance(products, list)
        self.reactants = reactants
        self.products = products

    def __str__(self):
        reactants = ' + '.join(map(lambda x: x.name, self.reactants))
        products = ' + '.join(map(lambda x: x.name, self.products))
        return f'{reactants} -> {products}'

    @property
    def energy(self):
        """
        Energy of the reaction (i.e. products - reactants)
        """
        return sum(map(lambda x: x.energy, self.products)) \
            - sum(map(lambda x: x.energy, self.reactants))


class EReaction(Reaction):
    def __init__(self, reactants, products, ne, ref_pot, u=0):
        """
        Electrochemical reaction wherein electrons are generated or used up
        :param ne: number of electrons generated by the reaction
            negative if an electron is absorbed
        :param ref_pot: The absolute reference potential used
            e.g. Standard Hydrogen Electrode, Saturated Calomel Electrode, â€¦
        :param u: applied potential
        """
        super().__init__(reactants, products)
        self.ne = ne
        self.ref_pot = ref_pot
        self.u = u

    def __str__(self):
        return super().__str__() + f' + !{self.ref_pot:.2f}!'

    @property
    def energy(self):
        """
        Energy of the reaction with reference potential included
            i.e. products - reactants - ref_pot
        """
        return super().energy - (self.ref_pot + self.u)*self.ne
