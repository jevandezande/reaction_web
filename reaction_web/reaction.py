"""Reaction and EReaction classes for chemical and electrochemical reactions."""

from dataclasses import dataclass
from typing import Iterator, Sequence

from .molecule import Molecule


@dataclass
class Reaction:
    """
    A transformation from reactant to product Molecules.

    >>> from reaction_web import Molecule
    >>> H = Molecule("H", 0.0)
    >>> O = Molecule("O", 0.0)
    >>> H2O = Molecule("H₂O", 1.0)
    >>> r = Reaction((H, O, H), (H2O,))
    >>> r
    <Reaction H + O + H -> H₂O + 1.0000>
    >>> str(r)
    'H + O + H -> H₂O'
    >>> r.energy
    1.0
    """

    reactants: Sequence[Molecule]
    products: Sequence[Molecule]

    def __repr__(self) -> str:
        """Reaction representation."""
        return f"<Reaction {str(self)} + {self.energy:.4f}>"

    def __str__(self) -> str:
        """Reaction equation string."""

        def display(mols):
            return " + ".join(map(lambda x: x.name, mols))

        return f"{display(self.reactants)} -> {display(self.products)}"

    def __iter__(self) -> Iterator[Sequence[Molecule]]:
        """Iterate over reactants and products."""
        yield self.reactants
        yield self.products

    @property
    def energy(self) -> float:
        """Energy of the Reaction (i.e. products - reactants)."""
        return sum(map(lambda x: x.energy, self.products)) - sum(map(lambda x: x.energy, self.reactants))


@dataclass
class EReaction(Reaction):
    """
    Electrochemical reaction wherein electrons are released or absorbed.

    :param ne: number of electrons generated by the Reaction
        negative if an electron is absorbed
    :param ref_pot: The absolute reference potential used
        e.g. Standard Hydrogen Electrode, Saturated Calomel Electrode, …
    :param u: applied potential

    >>> from reaction_web import Molecule
    >>> Hp = Molecule("H+", 0.0)
    >>> O = Molecule("O", 0.0)
    >>> OHm = Molecule("OH-", 1.0)
    >>> er = EReaction((Hp, O), (OHm,), ne=2, ref_pot=1.0)
    >>> er
    <EReaction H+ + O -> OH- + !1.00! + -1.0000>
    >>> str(er)
    'H+ + O -> OH- + !1.00!'
    >>> er.energy
    -1.0
    """

    ne: int
    ref_pot: float
    u: float = 0

    def __repr__(self) -> str:
        """Reaction representation."""
        return f"<EReaction {str(self)} + {self.energy:.4f}>"

    def __str__(self) -> str:
        """Reaction equation string with reference potential."""
        return super().__str__() + f" + !{self.ref_pot:.2f}!"

    @property
    def energy(self) -> float:
        """
        Energy of the Reaction with the reference potential included.

        i.e. products - reactants - ref_pot
        """
        return super().energy - (self.ref_pot + self.u) * self.ne
