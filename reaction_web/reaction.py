from collections.abc import Sequence
from dataclasses import dataclass


@dataclass
class Reaction:
    """
    A transformation from reactant to product molecules.
    """

    reactants: Sequence
    products: Sequence

    def __str__(self) -> str:
        """
        Reaction equation string
        """
        display = lambda mols: " + ".join(map(lambda x: x.name, mols))
        return f"{display(self.reactants)} -> {display(self.products)}"

    @property
    def energy(self) -> float:
        """
        Energy of the reaction (i.e. products - reactants)
        """
        return sum(map(lambda x: x.energy, self.products)) - sum(map(lambda x: x.energy, self.reactants))


@dataclass
class EReaction(Reaction):
    """
    Electrochemical reaction wherein electrons are released or absorbed

    :param ne: number of electrons generated by the reaction
        negative if an electron is absorbed
    :param ref_pot: The absolute reference potential used
        e.g. Standard Hydrogen Electrode, Saturated Calomel Electrode, â€¦
    :param u: applied potential
    """

    ne: int
    ref_pot: float
    u: float = 0

    def __str__(self) -> str:
        """
        Reaction equation string with reference potential
        """
        return super().__str__() + f" + !{self.ref_pot:.2f}!"

    @property
    def energy(self) -> float:
        """
        Energy of the reaction with the reference potential included
            i.e. products - reactants - ref_pot
        """
        return super().energy - (self.ref_pot + self.u) * self.ne
