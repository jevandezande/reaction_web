from collections.abc import Sequence

from .molecule import Molecule


class Reaction:
    def __init__(self, reactants: Sequence[Molecule], products: Sequence[Molecule]):
        """
        A transformation from reactant to product molecules.

        :param reactants: Reactant molecules
        :param products: Product molecules
        """
        assert isinstance(reactants, Sequence)
        assert isinstance(products, Sequence)
        self.reactants = reactants
        self.products = products

    def __str__(self):
        """
        Reaction equation string
        """
        display = lambda mols: " + ".join(map(lambda x: x.name, mols))
        return f"{display(self.reactants)} -> {display(self.products)}"

    @property
    def energy(self) -> float:
        """
        Energy of the reaction (i.e. products - reactants)
        """
        return sum(map(lambda x: x.energy, self.products)) - sum(map(lambda x: x.energy, self.reactants))


class EReaction(Reaction):
    def __init__(
        self, reactants: Sequence[Molecule], products: Sequence[Molecule], ne: int, ref_pot: float, u: float = 0
    ):
        """
        Electrochemical reaction wherein electrons are released or absorbed
        :param ne: number of electrons generated by the reaction
            negative if an electron is absorbed
        :param ref_pot: The absolute reference potential used
            e.g. Standard Hydrogen Electrode, Saturated Calomel Electrode, â€¦
        :param u: applied potential
        """
        super().__init__(reactants, products)
        self.ne = ne
        self.ref_pot = ref_pot
        self.u = u

    def __str__(self):
        """
        Reaction equation string with reference potential
        """
        return super().__str__() + f" + !{self.ref_pot:.2f}!"

    @property
    def energy(self) -> float:
        """
        Energy of the reaction with the reference potential included
            i.e. products - reactants - ref_pot
        """
        return super().energy - (self.ref_pot + self.u) * self.ne
